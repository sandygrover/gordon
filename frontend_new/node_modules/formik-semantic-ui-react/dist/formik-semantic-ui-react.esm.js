import React, { forwardRef } from 'react';
import { Form as Form$1, FormButton, FormField, Label, Input as Input$2, TextArea as TextArea$2, Checkbox as Checkbox$1, Radio as Radio$1, Select as Select$1 } from 'semantic-ui-react';
import { useFormikContext, FastField, Field as Field$1, isString, isObject } from 'formik';

var Form = function Form(props) {
  var _useFormikContext = useFormikContext(),
      handleSubmit = _useFormikContext.handleSubmit;

  return React.createElement(Form$1, Object.assign({
    onSubmit: handleSubmit
  }, props));
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var Field = function Field(_ref) {
  var fast = _ref.fast,
      children = _ref.children,
      restProps = _objectWithoutPropertiesLoose(_ref, ["fast", "children"]);

  if (fast) {
    return React.createElement(FastField, Object.assign({
      "data-testid": "fast-field"
    }, restProps), children);
  } else {
    return React.createElement(Field$1, Object.assign({
      "data-testid": "field"
    }, restProps), children);
  }
};

var RESET_BUTTON_ID = 'formik-semantic-ui-react-reset-button';
var ResetButton = function ResetButton(_ref) {
  var _onClick = _ref.onClick,
      restProps = _objectWithoutPropertiesLoose(_ref, ["onClick"]);

  var formContext = useFormikContext();
  return React.createElement(FormButton, Object.assign({
    id: RESET_BUTTON_ID,
    type: "button",
    onClick: function onClick(event, data) {
      formContext.resetForm();
      _onClick && _onClick(event, data);
    }
  }, restProps));
};

var SUBMIT_BUTTON_ID = 'formik-semantic-ui-react-submit-button';
var SubmitButton = function SubmitButton(_ref) {
  var disableLoading = _ref.disableLoading,
      loading = _ref.loading,
      restProps = _objectWithoutPropertiesLoose(_ref, ["disableLoading", "loading"]);

  var context = useFormikContext();
  return React.createElement(FormButton, Object.assign({
    id: SUBMIT_BUTTON_ID,
    type: "submit",
    loading: disableLoading ? undefined : loading === null || loading === undefined ? context.isSubmitting : loading
  }, restProps));
};

var defaultErrorConfig = {
  prompt: true,
  pointing: 'above'
};

function getErrorConfig(meta, errorPrompt) {
  if (meta.error && meta.touched && errorPrompt) {
    if (errorPrompt === true) {
      return _extends({
        content: meta.error
      }, defaultErrorConfig);
    } else {
      return _extends({
        content: meta.error
      }, errorPrompt);
    }
  } else {
    return null;
  }
}

var Input = function Input(_ref, ref) {
  var id = _ref.id,
      name = _ref.name,
      validate = _ref.validate,
      fast = _ref.fast,
      _onChange = _ref.onChange,
      errorPrompt = _ref.errorPrompt,
      label = _ref.label,
      inputLabel = _ref.inputLabel,
      restProps = _objectWithoutPropertiesLoose(_ref, ["id", "name", "validate", "fast", "onChange", "onBlur", "errorPrompt", "label", "inputLabel"]);

  var fieldLabelId = id && label && id + "-field-label" || undefined;
  var inputLabelId = id && inputLabel && id + "-input-label" || undefined;
  var fieldLabel = label && React.createElement("label", {
    id: fieldLabelId,
    htmlFor: id
  }, label);

  var errorLabel = function errorLabel(meta) {
    var errorConfig = getErrorConfig(meta, errorPrompt);
    return React.createElement(Label, Object.assign({
      id: id ? id + "-error-message" : undefined
    }, errorConfig, {
      role: "alert",
      "aria-atomic": true
    }));
  };

  var errorLabelBefore = function errorLabelBefore(meta) {
    var _getErrorConfig, _getErrorConfig2;

    return (((_getErrorConfig = getErrorConfig(meta, errorPrompt)) == null ? void 0 : _getErrorConfig.pointing) === 'below' || ((_getErrorConfig2 = getErrorConfig(meta, errorPrompt)) == null ? void 0 : _getErrorConfig2.pointing) === 'right') && errorLabel(meta);
  };

  var errorLabelAfter = function errorLabelAfter(meta) {
    var _getErrorConfig3, _getErrorConfig4;

    return (((_getErrorConfig3 = getErrorConfig(meta, errorPrompt)) == null ? void 0 : _getErrorConfig3.pointing) === 'above' || ((_getErrorConfig4 = getErrorConfig(meta, errorPrompt)) == null ? void 0 : _getErrorConfig4.pointing) === 'left') && errorLabel(meta);
  };

  return React.createElement(Field, {
    name: name,
    validate: validate,
    fast: fast
  }, function (_ref2) {
    var _ref2$field = _ref2.field,
        value = _ref2$field.value,
        _onChange2 = _ref2$field.onChange,
        _onBlur2 = _ref2$field.onBlur,
        meta = _ref2.meta;
    return React.createElement(FormField, {
      error: meta.touched && !!meta.error
    }, fieldLabel, errorLabelBefore(meta), React.createElement(Input$2, Object.assign({
      id: id,
      ref: ref,
      name: name,
      value: value,
      label: isString(inputLabel) && {
        children: inputLabel,
        htmlFor: id,
        id: inputLabelId
      } || isObject(inputLabel) && _extends({}, inputLabel, {
        htmlFor: id,
        id: inputLabelId
      }),
      onChange: function onChange(event, data) {
        _onChange2(event);

        _onChange && _onChange(event, data);
      },
      onBlur: function onBlur(event) {
        if (event.relatedTarget instanceof Element) {
          /*
            Skip validation onBlur when reset / submit button is clicked or
            It will block reset / submit button onClick event
          */
          if (event.relatedTarget.id === RESET_BUTTON_ID || event.relatedTarget.id === SUBMIT_BUTTON_ID) {
            return;
          }
        }

        _onBlur2(event);
      },
      "aria-describedby": id && !!meta.error ? id + "-error-message" : null,
      "aria-invalid": !!meta.error ? true : undefined,
      "aria-labelledby": (fieldLabelId != null ? fieldLabelId : '') + " " + (inputLabelId != null ? inputLabelId : '')
    }, restProps)), errorLabelAfter(meta));
  });
};
var Input$1 = /*#__PURE__*/forwardRef(Input);

var TextArea = function TextArea(_ref, ref) {
  var name = _ref.name,
      validate = _ref.validate,
      fast = _ref.fast,
      _onChange = _ref.onChange,
      errorPrompt = _ref.errorPrompt,
      restProps = _objectWithoutPropertiesLoose(_ref, ["name", "validate", "fast", "onChange", "errorPrompt", "errorConfig"]);

  return React.createElement(Field, {
    name: name,
    validate: validate,
    fast: fast
  }, function (_ref2) {
    var _ref2$field = _ref2.field,
        value = _ref2$field.value,
        _onChange2 = _ref2$field.onChange,
        _onBlur = _ref2$field.onBlur,
        meta = _ref2.meta;
    return React.createElement(FormField, Object.assign({
      control: TextArea$2,
      ref: ref,
      name: name,
      value: value,
      onChange: function onChange(event, data) {
        _onChange2(event);

        _onChange && _onChange(event, data);
      },
      onBlur: function onBlur(event) {
        if (event.relatedTarget instanceof Element) {
          /*
            Skip validation onBlur when reset / submit button is clicked or
            It will block reset / submit button onClick event
          */
          if (event.relatedTarget.id === RESET_BUTTON_ID || event.relatedTarget.id === SUBMIT_BUTTON_ID) {
            return;
          }
        }

        _onBlur(event);
      },
      error: getErrorConfig(meta, errorPrompt)
    }, restProps));
  });
};
var TextArea$1 = /*#__PURE__*/forwardRef(TextArea);

var Checkbox = function Checkbox(_ref) {
  var name = _ref.name,
      validate = _ref.validate,
      fast = _ref.fast,
      _onChange = _ref.onChange,
      errorPrompt = _ref.errorPrompt,
      restProps = _objectWithoutPropertiesLoose(_ref, ["name", "validate", "fast", "onChange", "errorPrompt"]);

  return React.createElement(Field, {
    name: name,
    validate: validate,
    fast: fast
  }, function (_ref2) {
    var _ref2$field = _ref2.field,
        value = _ref2$field.value,
        onBlur = _ref2$field.onBlur,
        _ref2$form = _ref2.form,
        setFieldValue = _ref2$form.setFieldValue,
        setFieldTouched = _ref2$form.setFieldTouched,
        meta = _ref2.meta;
    return React.createElement(FormField, Object.assign({
      control: Checkbox$1,
      name: name,
      checked: value,
      onChange: function onChange(event, data) {
        setFieldValue(name, data.checked);
        setFieldTouched(name, true, false);
        _onChange && _onChange(event, data);
      },
      onBlur: onBlur,
      error: getErrorConfig(meta, errorPrompt)
    }, restProps));
  });
};

var Radio = function Radio(_ref) {
  var name = _ref.name,
      validate = _ref.validate,
      fast = _ref.fast,
      _value = _ref.value,
      _onChange = _ref.onChange,
      errorPrompt = _ref.errorPrompt,
      restProps = _objectWithoutPropertiesLoose(_ref, ["name", "validate", "fast", "value", "onChange", "errorPrompt"]);

  return React.createElement(Field, {
    name: name,
    validate: validate,
    fast: fast
  }, function (_ref2) {
    var _ref2$field = _ref2.field,
        value = _ref2$field.value,
        onBlur = _ref2$field.onBlur,
        _ref2$form = _ref2.form,
        setFieldValue = _ref2$form.setFieldValue,
        setFieldTouched = _ref2$form.setFieldTouched,
        meta = _ref2.meta;
    return React.createElement(FormField, Object.assign({
      control: Radio$1,
      name: name,
      checked: value === _value,
      value: _value,
      onChange: function onChange(event, data) {
        setFieldValue(name, _value);
        setFieldTouched(name, true, false);
        _onChange && _onChange(event, data);
      },
      onBlur: onBlur,
      error: getErrorConfig(meta, errorPrompt)
    }, restProps));
  });
};

var Select = function Select(_ref) {
  var name = _ref.name,
      options = _ref.options,
      validate = _ref.validate,
      fast = _ref.fast,
      _onChange = _ref.onChange,
      onBlur = _ref.onBlur,
      errorPrompt = _ref.errorPrompt,
      restProps = _objectWithoutPropertiesLoose(_ref, ["name", "value", "options", "validate", "fast", "onChange", "onBlur", "errorPrompt"]);

  return React.createElement(Field, {
    name: name,
    validate: validate,
    fast: fast
  }, function (_ref2) {
    var value = _ref2.field.value,
        _ref2$form = _ref2.form,
        setFieldValue = _ref2$form.setFieldValue,
        setFieldTouched = _ref2$form.setFieldTouched,
        meta = _ref2.meta;
    return React.createElement(FormField, Object.assign({
      control: Select$1,
      name: name,
      options: options,
      value: value,
      onChange: function onChange(event, data) {
        setFieldValue(name, data.value);
        setFieldTouched(name, true, false);
        _onChange && _onChange(event, data);
      },
      onBlur: onBlur,
      error: getErrorConfig(meta, errorPrompt)
    }, restProps));
  });
};

var isDevelopmentMode = function isDevelopmentMode() {
  return !process.env.NODE_ENV || process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test';
};
var FormikDebug = function FormikDebug(props) {
  return isDevelopmentMode() ? React.createElement("pre", {
    style: _extends({
      padding: 15
    }, props),
    "data-testid": "debug"
  }, React.createElement(Field$1, null, function (_ref) {
    var form = _ref.form;
    return JSON.stringify(form, null, 2);
  })) : null;
};

export { Checkbox, Field, Form, FormikDebug, Input$1 as Input, Radio, ResetButton, Select, SubmitButton, TextArea$1 as TextArea };
//# sourceMappingURL=formik-semantic-ui-react.esm.js.map
