{"version":3,"file":"formik-semantic-ui-react.cjs.production.min.js","sources":["../src/Field.tsx","../src/ResetButton.tsx","../src/SubmitButton.tsx","../src/types.ts","../src/utils.ts","../src/Input.tsx","../src/TextArea.tsx","../src/Checkbox.tsx","../src/Form.tsx","../src/FormikDebug.tsx","../src/Radio.tsx","../src/Select.tsx"],"sourcesContent":["import React from 'react';\nimport { FieldProps } from './types';\nimport { FastField, Field as FormikField } from 'formik';\n\nexport const Field: React.FC<FieldProps> = ({\n  fast,\n  children,\n  ...restProps\n}) => {\n  if (fast) {\n    return (\n      <FastField data-testid=\"fast-field\" {...restProps}>\n        {children}\n      </FastField>\n    );\n  } else {\n    return (\n      <FormikField data-testid=\"field\" {...restProps}>\n        {children}\n      </FormikField>\n    );\n  }\n};\n\nexport default Field;\n","import React from 'react';\nimport { ButtonProps, FormButton } from 'semantic-ui-react';\nimport { useFormikContext } from 'formik';\n\nexport const RESET_BUTTON_ID = 'formik-semantic-ui-react-reset-button';\n\nexport const ResetButton = ({ onClick, ...restProps }: ButtonProps) => {\n  const formContext = useFormikContext();\n  return (\n    <FormButton\n      id={RESET_BUTTON_ID}\n      type=\"button\"\n      onClick={(event, data) => {\n        formContext.resetForm();\n        onClick && onClick(event, data);\n      }}\n      {...restProps}\n    />\n  );\n};\n\nexport default ResetButton;\n","import React from 'react';\nimport { ButtonProps, FormButton } from 'semantic-ui-react';\nimport { useFormikContext } from 'formik';\n\ninterface Props {\n  disableLoading?: boolean;\n}\n\nexport const SUBMIT_BUTTON_ID = 'formik-semantic-ui-react-submit-button';\n\nexport const SubmitButton = ({\n  disableLoading,\n  loading,\n  ...restProps\n}: ButtonProps & Props) => {\n  const context = useFormikContext();\n  return (\n    <FormButton\n      id={SUBMIT_BUTTON_ID}\n      type=\"submit\"\n      loading={\n        disableLoading\n          ? undefined\n          : loading === null || loading === undefined\n          ? context.isSubmitting\n          : loading\n      }\n      {...restProps}\n    />\n  );\n};\n\nexport default SubmitButton;\n","import { SemanticCOLORS } from 'semantic-ui-react';\n\nexport interface FieldProps {\n  name: string;\n  validate?: (value: any) => undefined | string | Promise<any>;\n  fast?: boolean;\n}\n\nexport interface FieldErrorProps {\n  errorPrompt?: boolean | ErrorPromptConfig;\n}\n\nexport type ErrorPointing = boolean | 'above' | 'below' | 'left' | 'right';\n\nexport interface ErrorPromptConfig {\n  // To config basic & color, you have to change prompt to false first\n  prompt?: boolean;\n  basic?: boolean;\n  color?: SemanticCOLORS;\n  pointing?: ErrorPointing;\n}\n\nexport const defaultErrorConfig: ErrorPromptConfig = {\n  prompt: true,\n  pointing: 'above',\n};\n","import { defaultErrorConfig, ErrorPromptConfig } from './types';\nimport { FieldMetaProps } from 'formik';\n\n// Helper to decide error config\nexport function getErrorConfig<T>(\n  meta: FieldMetaProps<T>,\n  errorPrompt: boolean | ErrorPromptConfig | undefined,\n) {\n  if (meta.error && meta.touched && errorPrompt) {\n    if (errorPrompt === true) {\n      return { content: meta.error, ...defaultErrorConfig };\n    } else {\n      return { content: meta.error, ...errorPrompt };\n    }\n  } else {\n    return null;\n  }\n}\n","import React, { forwardRef, Ref } from 'react';\nimport {\n  FieldMetaProps,\n  FieldProps as FormikFieldProps,\n  isObject,\n  isString,\n} from 'formik';\nimport {\n  FormField,\n  Input as SInput,\n  InputOnChangeData,\n  InputProps as _InputProps,\n  Label,\n  LabelProps,\n  SemanticShorthandItem,\n} from 'semantic-ui-react';\nimport { FieldErrorProps, FieldProps } from './types';\nimport Field from './Field';\nimport { RESET_BUTTON_ID } from './ResetButton';\nimport { SUBMIT_BUTTON_ID } from './SubmitButton';\nimport { getErrorConfig } from './utils';\n\nexport interface InputProps extends FieldProps, _InputProps, FieldErrorProps {\n  inputLabel?: SemanticShorthandItem<LabelProps>;\n}\n\nexport const Input = (\n  {\n    id,\n    name,\n    validate,\n    fast,\n    onChange: _onChange,\n    onBlur: _onBlur,\n    errorPrompt,\n    label,\n    inputLabel,\n    ...restProps\n  }: InputProps,\n  ref: Ref<SInput>,\n) => {\n  const fieldLabelId = (id && label && `${id}-field-label`) || undefined;\n  const inputLabelId = (id && inputLabel && `${id}-input-label`) || undefined;\n\n  const fieldLabel = label && (\n    <label id={fieldLabelId} htmlFor={id}>\n      {label}\n    </label>\n  );\n\n  const errorLabel = (meta: FieldMetaProps<any>) => {\n    const errorConfig = getErrorConfig(meta, errorPrompt);\n\n    return (\n      <Label\n        id={id ? `${id}-error-message` : undefined}\n        {...errorConfig}\n        role=\"alert\"\n        aria-atomic\n      />\n    );\n  };\n\n  const errorLabelBefore = (meta: FieldMetaProps<SInput>) =>\n    (getErrorConfig(meta, errorPrompt)?.pointing === 'below' ||\n      getErrorConfig(meta, errorPrompt)?.pointing === 'right') &&\n    errorLabel(meta);\n\n  const errorLabelAfter = (meta: FieldMetaProps<SInput>) =>\n    (getErrorConfig(meta, errorPrompt)?.pointing === 'above' ||\n      getErrorConfig(meta, errorPrompt)?.pointing === 'left') &&\n    errorLabel(meta);\n\n  return (\n    <Field name={name} validate={validate} fast={fast}>\n      {({ field: { value, onChange, onBlur }, meta }: FormikFieldProps) => (\n        <FormField error={meta.touched && !!meta.error}>\n          {fieldLabel}\n          {errorLabelBefore(meta)}\n          <SInput\n            id={id}\n            ref={ref}\n            name={name}\n            value={value}\n            label={\n              (isString(inputLabel) && {\n                children: inputLabel,\n                htmlFor: id,\n                id: inputLabelId,\n              }) ||\n              (isObject(inputLabel) && {\n                ...(inputLabel as object),\n                htmlFor: id,\n                id: inputLabelId,\n              })\n            }\n            onChange={(\n              event: React.ChangeEvent<HTMLInputElement>,\n              data: InputOnChangeData,\n            ) => {\n              onChange(event);\n              _onChange && _onChange(event, data);\n            }}\n            onBlur={(event: FocusEvent) => {\n              if (event.relatedTarget instanceof Element) {\n                /*\n                  Skip validation onBlur when reset / submit button is clicked or\n                  It will block reset / submit button onClick event\n                */\n                if (\n                  event.relatedTarget.id === RESET_BUTTON_ID ||\n                  event.relatedTarget.id === SUBMIT_BUTTON_ID\n                ) {\n                  return;\n                }\n              }\n              onBlur(event);\n            }}\n            aria-describedby={id && !!meta.error ? `${id}-error-message` : null}\n            aria-invalid={!!meta.error ? true : undefined}\n            aria-labelledby={`${fieldLabelId ?? ''} ${inputLabelId ?? ''}`}\n            {...restProps}\n          />\n          {errorLabelAfter(meta)}\n        </FormField>\n      )}\n    </Field>\n  );\n};\n\nexport default forwardRef(Input);\n","import React, { forwardRef, Ref } from 'react';\nimport {\n  FormField,\n  TextArea as _TextArea,\n  TextAreaProps as _TextAreaProps,\n} from 'semantic-ui-react';\nimport { FieldErrorProps, FieldProps } from './types';\nimport { getErrorConfig } from './utils';\nimport Field from './Field';\nimport { FieldProps as FormikFieldProps } from 'formik';\nimport { RESET_BUTTON_ID } from './ResetButton';\nimport { SUBMIT_BUTTON_ID } from './SubmitButton';\n\nexport type TextAreaProps = FieldProps & _TextAreaProps & FieldErrorProps;\n\nexport const TextArea = (\n  {\n    name,\n    validate,\n    fast,\n    onChange: _onChange,\n    errorPrompt,\n    errorConfig,\n    ...restProps\n  }: TextAreaProps,\n  ref: Ref<_TextArea>,\n) => (\n  <Field name={name} validate={validate} fast={fast}>\n    {({ field: { value, onChange, onBlur }, meta }: FormikFieldProps) => (\n      <FormField\n        control={_TextArea}\n        ref={ref}\n        name={name}\n        value={value}\n        onChange={(\n          event: React.ChangeEvent<HTMLTextAreaElement>,\n          data: _TextAreaProps,\n        ) => {\n          onChange(event);\n          _onChange && _onChange(event, data);\n        }}\n        onBlur={(event: FocusEvent) => {\n          if (event.relatedTarget instanceof Element) {\n            /*\n              Skip validation onBlur when reset / submit button is clicked or\n              It will block reset / submit button onClick event\n            */\n            if (\n              event.relatedTarget.id === RESET_BUTTON_ID ||\n              event.relatedTarget.id === SUBMIT_BUTTON_ID\n            ) {\n              return;\n            }\n          }\n          onBlur(event);\n        }}\n        error={getErrorConfig(meta, errorPrompt)}\n        {...restProps}\n      />\n    )}\n  </Field>\n);\n\nexport default forwardRef(TextArea);\n","import React from 'react';\nimport {\n  Checkbox as _Checkbox,\n  CheckboxProps as _CheckboxProps,\n  FormField,\n} from 'semantic-ui-react';\nimport { FieldProps as FormikFieldProps } from 'formik';\nimport { FieldErrorProps, FieldProps } from './types';\nimport { getErrorConfig } from './utils';\nimport Field from './Field';\n\nexport interface CheckboxProps\n  extends FieldProps,\n    _CheckboxProps,\n    FieldErrorProps {\n  name: string;\n}\n\nexport const Checkbox = ({\n  name,\n  validate,\n  fast,\n  onChange: _onChange,\n  errorPrompt,\n  ...restProps\n}: CheckboxProps) => (\n  <Field name={name} validate={validate} fast={fast}>\n    {({\n      field: { value, onBlur },\n      form: { setFieldValue, setFieldTouched },\n      meta,\n    }: FormikFieldProps) => (\n      <FormField\n        control={_Checkbox}\n        name={name}\n        checked={value}\n        onChange={(\n          event: React.FormEvent<HTMLInputElement>,\n          data: _CheckboxProps,\n        ) => {\n          setFieldValue(name, data.checked);\n          setFieldTouched(name, true, false);\n          _onChange && _onChange(event, data);\n        }}\n        onBlur={onBlur}\n        error={getErrorConfig(meta, errorPrompt)}\n        {...restProps}\n      />\n    )}\n  </Field>\n);\n\nexport default Checkbox;\n","import React from 'react';\nimport { Form as SemanticForm, FormProps } from 'semantic-ui-react';\nimport { useFormikContext } from 'formik';\n\nexport const Form = (props: FormProps) => {\n  const { handleSubmit } = useFormikContext();\n  return <SemanticForm onSubmit={handleSubmit} {...props} />;\n};\n\nexport default Form;\n","/* Source: https://github.com/jannikbuschke/formik-antd/blob/master/src/formik-debug/index.tsx*/\n\nimport React from 'react';\nimport { Field } from 'formik';\n\nexport const isDevelopmentMode = () =>\n  !process.env.NODE_ENV ||\n  process.env.NODE_ENV === 'development' ||\n  process.env.NODE_ENV === 'test';\n\nexport const FormikDebug = (\n  props: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  >,\n) =>\n  isDevelopmentMode() ? (\n    <pre style={{ padding: 15, ...props }} data-testid=\"debug\">\n      <Field>{({ form }: any) => JSON.stringify(form, null, 2)}</Field>\n    </pre>\n  ) : null;\n","import React from 'react';\nimport { FieldErrorProps, FieldProps } from './types';\nimport {\n  CheckboxProps,\n  FormField,\n  Radio as _Radio,\n  RadioProps as _RadioProps,\n} from 'semantic-ui-react';\nimport { FieldProps as FormikFieldProps } from 'formik';\nimport { getErrorConfig } from './utils';\nimport Field from './Field';\n\nexport type RadioProps = FieldProps & _RadioProps & FieldErrorProps;\n\nexport const Radio = ({\n  name,\n  validate,\n  fast,\n  value: _value,\n  onChange: _onChange,\n  errorPrompt,\n  ...restProps\n}: RadioProps) => (\n  <Field name={name} validate={validate} fast={fast}>\n    {({\n      field: { value, onBlur },\n      form: { setFieldValue, setFieldTouched },\n      meta,\n    }: FormikFieldProps) => (\n      <FormField\n        control={_Radio}\n        name={name}\n        checked={value === _value}\n        value={_value}\n        onChange={(\n          event: React.FormEvent<HTMLInputElement>,\n          data: CheckboxProps,\n        ) => {\n          setFieldValue(name, _value);\n          setFieldTouched(name, true, false);\n          _onChange && _onChange(event, data);\n        }}\n        onBlur={onBlur}\n        error={getErrorConfig(meta, errorPrompt)}\n        {...restProps}\n      />\n    )}\n  </Field>\n);\n\nexport default Radio;\n","import React from 'react';\nimport { FieldErrorProps, FieldProps } from './types';\nimport {\n  DropdownProps,\n  FormField,\n  Select as _Select,\n  SelectProps as _SelectProps,\n} from 'semantic-ui-react';\nimport { FieldProps as FormikFieldProps } from 'formik';\nimport { getErrorConfig } from './utils';\nimport Field from './Field';\n\nexport type SelectProps = FieldProps & _SelectProps & FieldErrorProps;\n\nexport const Select = ({\n  name,\n  value: _value,\n  options,\n  validate,\n  fast,\n  onChange: _onChange,\n  onBlur,\n  errorPrompt,\n  ...restProps\n}: SelectProps) => (\n  <Field name={name} validate={validate} fast={fast}>\n    {({\n      field: { value },\n      form: { setFieldValue, setFieldTouched },\n      meta,\n    }: FormikFieldProps) => (\n      <FormField\n        control={_Select}\n        name={name}\n        options={options}\n        value={value}\n        onChange={(\n          event: React.SyntheticEvent<HTMLElement, Event>,\n          data: DropdownProps,\n        ) => {\n          setFieldValue(name, data.value);\n          setFieldTouched(name, true, false);\n          _onChange && _onChange(event, data);\n        }}\n        onBlur={onBlur}\n        error={getErrorConfig(meta, errorPrompt)}\n        {...restProps}\n      />\n    )}\n  </Field>\n);\n\nexport default Select;\n"],"names":["Field","fast","children","restProps","React","FastField","FormikField","RESET_BUTTON_ID","SUBMIT_BUTTON_ID","defaultErrorConfig","prompt","pointing","getErrorConfig","meta","errorPrompt","error","touched","content","forwardRef","ref","id","name","validate","_onChange","onChange","_onBlur","label","inputLabel","fieldLabelId","undefined","inputLabelId","fieldLabel","htmlFor","errorLabel","errorConfig","Label","role","field","value","onBlur","FormField","errorLabelBefore","SInput","isString","isObject","event","data","relatedTarget","Element","errorLabelAfter","control","_TextArea","form","setFieldValue","setFieldTouched","_Checkbox","checked","props","useFormikContext","SemanticForm","onSubmit","handleSubmit","_value","_Radio","onClick","formContext","FormButton","type","resetForm","options","_Select","disableLoading","loading","context","isSubmitting"],"mappings":"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"}